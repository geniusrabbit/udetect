// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: protocol/protocol.proto

package protocol

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnType int32

const (
	ConnType_Unknown  ConnType = 0
	ConnType_Ethernet ConnType = 1
	ConnType_WIFI     ConnType = 2
	ConnType_Cell     ConnType = 3
	ConnType_Cell2G   ConnType = 4
	ConnType_Cell3G   ConnType = 5
	ConnType_Cell4G   ConnType = 6
	ConnType_Cell5G   ConnType = 7
)

// Enum value maps for ConnType.
var (
	ConnType_name = map[int32]string{
		0: "Unknown",
		1: "Ethernet",
		2: "WIFI",
		3: "Cell",
		4: "Cell2G",
		5: "Cell3G",
		6: "Cell4G",
		7: "Cell5G",
	}
	ConnType_value = map[string]int32{
		"Unknown":  0,
		"Ethernet": 1,
		"WIFI":     2,
		"Cell":     3,
		"Cell2G":   4,
		"Cell3G":   5,
		"Cell4G":   6,
		"Cell5G":   7,
	}
)

func (x ConnType) Enum() *ConnType {
	p := new(ConnType)
	*p = x
	return p
}

func (x ConnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_protocol_proto_enumTypes[0].Descriptor()
}

func (ConnType) Type() protoreflect.EnumType {
	return &file_protocol_protocol_proto_enumTypes[0]
}

func (x ConnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnType.Descriptor instead.
func (ConnType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{0}
}

type DeviceType int32

const (
	DeviceType_Undefined DeviceType = 0
	DeviceType_Mobile    DeviceType = 1 // Mobile/Tablet
	DeviceType_PC        DeviceType = 2 // Personal Computer
	DeviceType_TV        DeviceType = 3 // Connected TV
	DeviceType_Phone     DeviceType = 4 // SmartPhone, SmallScreen
	DeviceType_Tablet    DeviceType = 5
	DeviceType_Connected DeviceType = 6 // Console, EReader, SmartWatch
	DeviceType_SetTopBox DeviceType = 7 // MediaHub
	DeviceType_Watch     DeviceType = 8 // SmartWatch
	DeviceType_Glasses   DeviceType = 9 // SmartGlasses
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "Undefined",
		1: "Mobile",
		2: "PC",
		3: "TV",
		4: "Phone",
		5: "Tablet",
		6: "Connected",
		7: "SetTopBox",
		8: "Watch",
		9: "Glasses",
	}
	DeviceType_value = map[string]int32{
		"Undefined": 0,
		"Mobile":    1,
		"PC":        2,
		"TV":        3,
		"Phone":     4,
		"Tablet":    5,
		"Connected": 6,
		"SetTopBox": 7,
		"Watch":     8,
		"Glasses":   9,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_protocol_proto_enumTypes[1].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_protocol_protocol_proto_enumTypes[1]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{1}
}

type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *UUID) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Carrier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Carrier) Reset() {
	*x = Carrier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Carrier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Carrier) ProtoMessage() {}

func (x *Carrier) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Carrier.ProtoReflect.Descriptor instead.
func (*Carrier) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *Carrier) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Carrier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Carrier) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unical User Identificator inside the traking system and provided to the user device
	Uuid *UUID `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Session Identificator inside the traking system and provided to the user device
	Sessid *UUID `protobuf:"bytes,2,opt,name=sessid,proto3" json:"sessid,omitempty"`
	// Fingerprint of the
	Fingerprint string `protobuf:"bytes,3,opt,name=Fingerprint,proto3" json:"Fingerprint,omitempty"`
	// Minimal possible age of the user
	AgeStart int32 `protobuf:"varint,4,opt,name=age_start,json=ageStart,proto3" json:"age_start,omitempty"`
	// Maximal possible age of the user
	AgeEnd int32 `protobuf:"varint,5,opt,name=age_end,json=ageEnd,proto3" json:"age_end,omitempty"`
	// main keywords interested by user
	Keywords []string `protobuf:"bytes,6,rep,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *User) GetSessid() *UUID {
	if x != nil {
		return x.Sessid
	}
	return nil
}

func (x *User) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *User) GetAgeStart() int32 {
	if x != nil {
		return x.AgeStart
	}
	return 0
}

func (x *User) GetAgeEnd() int32 {
	if x != nil {
		return x.AgeEnd
	}
	return 0
}

func (x *User) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type OS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the OS; like MacOS, Linux, Unix, etc.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Indicates the version or subversion of the software platform.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *OS) Reset() {
	*x = OS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OS) ProtoMessage() {}

func (x *OS) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OS.ProtoReflect.Descriptor instead.
func (*OS) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *OS) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OS) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Browser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the browser; like Safari, Chrome, Firefox, etc.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Indicates the version or subversion of the browser.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Is browser UA was detected as robot
	IsRobot int32 `protobuf:"varint,4,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`
}

func (x *Browser) Reset() {
	*x = Browser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Browser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Browser) ProtoMessage() {}

func (x *Browser) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Browser.ProtoReflect.Descriptor instead.
func (*Browser) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *Browser) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Browser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Browser) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Browser) GetIsRobot() int32 {
	if x != nil {
		return x.IsRobot
	}
	return 0
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Indicates the name of the company that manufactures the device
	// or primarily sells it, e.g. Samsung.
	Make string `protobuf:"bytes,2,opt,name=make,proto3" json:"make,omitempty"`
	// Indicates the model name or number used primarily by the hardware
	// vendor to identify the device, e.g.SM-T805S. When a model identifier
	// is not available the HardwareName will be used.
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Indicates the name and version of the operating system the device is using.
	Os *OS `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	// Browser information model
	Browser *Browser `protobuf:"bytes,5,opt,name=browser,proto3" json:"browser,omitempty"`
	// Connection type of the device
	Connectiontype ConnType `protobuf:"varint,6,opt,name=connectiontype,proto3,enum=udetect.ConnType" json:"connectiontype,omitempty"`
	// Indicates the type of the device based on values set in other properties,
	// such as IsMobile, IsTablet, IsSmartphone, IsSmallScreen etc.
	Devicetype DeviceType `protobuf:"varint,7,opt,name=devicetype,proto3,enum=udetect.DeviceType" json:"devicetype,omitempty"`
	// Physical height of the screen in pixels.
	// Indicates the height of the device's screen in pixels.
	// This property is not applicable for a device that does not have a screen.
	// For devices such as tablets or TV which are predominantly used in landscape mode,
	// the pixel height will be the smaller value compared to the pixel width.
	Height int32 `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	// Physical width of the screen in pixels
	// Indicates the width of the device's screen in pixels.
	// This property is not applicable for a device that does not have a screen.
	// For devices such as tablets or TV which are predominantly used in landscape mode,
	// the pixel width will be the larger value compared to the pixel height.
	Width int32 `protobuf:"varint,9,opt,name=width,proto3" json:"width,omitempty"`
	// Screen size as pixels per linear inch.
	// ((ScreenPixelsWidth / ScreenInchesWidth) + (ScreenPixelsHeight / ScreenInchesHeight)) / 2
	Ppi int32 `protobuf:"varint,10,opt,name=ppi,proto3" json:"ppi,omitempty"`
	// The ratio of physical pixels to device independent pixels.
	PxRatio float32 `protobuf:"fixed32,11,opt,name=px_ratio,json=pxRatio,proto3" json:"px_ratio,omitempty"`
	// Hardware version of the device (e.g., "5S" for iPhone 5S).
	Hwver string `protobuf:"bytes,12,opt,name=hwver,proto3" json:"hwver,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *Device) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Device) GetMake() string {
	if x != nil {
		return x.Make
	}
	return ""
}

func (x *Device) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Device) GetOs() *OS {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *Device) GetBrowser() *Browser {
	if x != nil {
		return x.Browser
	}
	return nil
}

func (x *Device) GetConnectiontype() ConnType {
	if x != nil {
		return x.Connectiontype
	}
	return ConnType_Unknown
}

func (x *Device) GetDevicetype() DeviceType {
	if x != nil {
		return x.Devicetype
	}
	return DeviceType_Undefined
}

func (x *Device) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Device) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Device) GetPpi() int32 {
	if x != nil {
		return x.Ppi
	}
	return 0
}

func (x *Device) GetPxRatio() float32 {
	if x != nil {
		return x.PxRatio
	}
	return 0
}

func (x *Device) GetHwver() string {
	if x != nil {
		return x.Hwver
	}
	return ""
}

type GeoLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal ID
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// IPv4/6
	Ip string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// Carrier or ISP derived from the IP address
	Carrier *Carrier `protobuf:"bytes,3,opt,name=carrier,proto3" json:"carrier,omitempty"`
	// Latitude from -90 to 90
	Lat float32 `protobuf:"fixed32,4,opt,name=lat,proto3" json:"lat,omitempty"`
	// Longitude from -180 to 180
	Lon float32 `protobuf:"fixed32,5,opt,name=lon,proto3" json:"lon,omitempty"`
	// Country using ISO 3166-1 Alpha 2
	Country string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	// Region using ISO 3166-2
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	// Region of a country using FIPS 10-4
	RegionFIPS104 string `protobuf:"bytes,8,opt,name=regionFIPS104,proto3" json:"regionFIPS104,omitempty"`
	Metro         string `protobuf:"bytes,9,opt,name=metro,proto3" json:"metro,omitempty"`
	City          string `protobuf:"bytes,10,opt,name=city,proto3" json:"city,omitempty"`
	Zip           string `protobuf:"bytes,11,opt,name=zip,proto3" json:"zip,omitempty"`
	// Local time as the number +/- of minutes from UTC
	UtcOffset int32 `protobuf:"varint,12,opt,name=utc_offset,json=utcOffset,proto3" json:"utc_offset,omitempty"`
}

func (x *GeoLocation) Reset() {
	*x = GeoLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLocation) ProtoMessage() {}

func (x *GeoLocation) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLocation.ProtoReflect.Descriptor instead.
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *GeoLocation) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GeoLocation) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GeoLocation) GetCarrier() *Carrier {
	if x != nil {
		return x.Carrier
	}
	return nil
}

func (x *GeoLocation) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *GeoLocation) GetLon() float32 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *GeoLocation) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GeoLocation) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GeoLocation) GetRegionFIPS104() string {
	if x != nil {
		return x.RegionFIPS104
	}
	return ""
}

func (x *GeoLocation) GetMetro() string {
	if x != nil {
		return x.Metro
	}
	return ""
}

func (x *GeoLocation) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GeoLocation) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *GeoLocation) GetUtcOffset() int32 {
	if x != nil {
		return x.UtcOffset
	}
	return 0
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Advertiser Device ID (IDFA, AAID), Identifier for Advertising (IFA)
	Udid            string   `protobuf:"bytes,1,opt,name=udid,proto3" json:"udid,omitempty"`
	Uid             *UUID    `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Sessid          *UUID    `protobuf:"bytes,3,opt,name=sessid,proto3" json:"sessid,omitempty"`
	Ip              string   `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Ua              string   `protobuf:"bytes,5,opt,name=ua,proto3" json:"ua,omitempty"`
	Url             string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Ref             string   `protobuf:"bytes,7,opt,name=ref,proto3" json:"ref,omitempty"`
	DNT             bool     `protobuf:"varint,8,opt,name=DNT,proto3" json:"DNT,omitempty"`
	LMT             bool     `protobuf:"varint,9,opt,name=LMT,proto3" json:"LMT,omitempty"`
	Adblock         bool     `protobuf:"varint,10,opt,name=adblock,proto3" json:"adblock,omitempty"`
	PrivateBrowsing bool     `protobuf:"varint,11,opt,name=private_browsing,json=privateBrowsing,proto3" json:"private_browsing,omitempty"`
	Js              bool     `protobuf:"varint,12,opt,name=js,proto3" json:"js,omitempty"`
	Languages       []string `protobuf:"bytes,13,rep,name=languages,proto3" json:"languages,omitempty"`
	PrimaryLanguage string   `protobuf:"bytes,14,opt,name=primary_language,json=primaryLanguage,proto3" json:"primary_language,omitempty"`
	FlashVer        string   `protobuf:"bytes,15,opt,name=flash_ver,json=flashVer,proto3" json:"flash_ver,omitempty"`
	Width           int32    `protobuf:"varint,16,opt,name=width,proto3" json:"width,omitempty"`
	Height          int32    `protobuf:"varint,17,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *Request) GetUdid() string {
	if x != nil {
		return x.Udid
	}
	return ""
}

func (x *Request) GetUid() *UUID {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *Request) GetSessid() *UUID {
	if x != nil {
		return x.Sessid
	}
	return nil
}

func (x *Request) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Request) GetUa() string {
	if x != nil {
		return x.Ua
	}
	return ""
}

func (x *Request) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Request) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Request) GetDNT() bool {
	if x != nil {
		return x.DNT
	}
	return false
}

func (x *Request) GetLMT() bool {
	if x != nil {
		return x.LMT
	}
	return false
}

func (x *Request) GetAdblock() bool {
	if x != nil {
		return x.Adblock
	}
	return false
}

func (x *Request) GetPrivateBrowsing() bool {
	if x != nil {
		return x.PrivateBrowsing
	}
	return false
}

func (x *Request) GetJs() bool {
	if x != nil {
		return x.Js
	}
	return false
}

func (x *Request) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *Request) GetPrimaryLanguage() string {
	if x != nil {
		return x.PrimaryLanguage
	}
	return ""
}

func (x *Request) GetFlashVer() string {
	if x != nil {
		return x.FlashVer
	}
	return ""
}

func (x *Request) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Request) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User person information which might be detected
	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Device information including browser and OS
	Device *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// Location of the device assumed to be the user’s current location defined by a Geo object
	Geo *GeoLocation `protobuf:"bytes,3,opt,name=geo,proto3" json:"geo,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *Response) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Response) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Response) GetGeo() *GeoLocation {
	if x != nil {
		return x.Geo
	}
	return nil
}

var File_protocol_protocol_proto protoreflect.FileDescriptor

var file_protocol_protocol_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x75, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x1c, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41,
	0x0a, 0x07, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xdc, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x06, 0x73, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x75, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x06, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04,
	0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b,
	0x22, 0x42, 0x0a, 0x02, 0x4f, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x22, 0xec, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a,
	0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x2e, 0x4f, 0x53, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x52, 0x07, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x75, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x70, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x70, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x78, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x78, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x77, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x77, 0x76, 0x65, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x6f, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x46, 0x49, 0x50, 0x53, 0x31, 0x30, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46, 0x49, 0x50, 0x53, 0x31, 0x30, 0x34, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x65, 0x74, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x74, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x75, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xbc, 0x03, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x64, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x64, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x06, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x75, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x4e, 0x54, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x44, 0x4e, 0x54, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x4d, 0x54, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x4c, 0x4d, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x64, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x6a, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6a, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61,
	0x73, 0x68, 0x56, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x22, 0x7e, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x75, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x2a, 0x69, 0x0a, 0x08, 0x43, 0x6f, 0x6e,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x46, 0x49, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x65,
	0x6c, 0x6c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x65, 0x6c, 0x6c, 0x32, 0x47, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x65, 0x6c, 0x6c, 0x33, 0x47, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x65, 0x6c, 0x6c, 0x34, 0x47, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x65, 0x6c, 0x6c,
	0x35, 0x47, 0x10, 0x07, 0x2a, 0x84, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x06,
	0x0a, 0x02, 0x50, 0x43, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x56, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x6f,
	0x78, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x10, 0x08, 0x12, 0x0b,
	0x0a, 0x07, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x10, 0x09, 0x32, 0x5e, 0x0a, 0x08, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x12, 0x10, 0x2e, 0x75, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x75, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01,
	0x2a, 0x5a, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x22,
	0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x42, 0x2a, 0x5a, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x6e, 0x69, 0x75, 0x73,
	0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x2f, 0x75, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_protocol_proto_rawDescOnce sync.Once
	file_protocol_protocol_proto_rawDescData = file_protocol_protocol_proto_rawDesc
)

func file_protocol_protocol_proto_rawDescGZIP() []byte {
	file_protocol_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_protocol_proto_rawDescData)
	})
	return file_protocol_protocol_proto_rawDescData
}

var file_protocol_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protocol_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_protocol_protocol_proto_goTypes = []any{
	(ConnType)(0),       // 0: udetect.ConnType
	(DeviceType)(0),     // 1: udetect.DeviceType
	(*UUID)(nil),        // 2: udetect.UUID
	(*Carrier)(nil),     // 3: udetect.Carrier
	(*User)(nil),        // 4: udetect.User
	(*OS)(nil),          // 5: udetect.OS
	(*Browser)(nil),     // 6: udetect.Browser
	(*Device)(nil),      // 7: udetect.Device
	(*GeoLocation)(nil), // 8: udetect.GeoLocation
	(*Request)(nil),     // 9: udetect.Request
	(*Response)(nil),    // 10: udetect.Response
}
var file_protocol_protocol_proto_depIdxs = []int32{
	2,  // 0: udetect.User.uuid:type_name -> udetect.UUID
	2,  // 1: udetect.User.sessid:type_name -> udetect.UUID
	5,  // 2: udetect.Device.os:type_name -> udetect.OS
	6,  // 3: udetect.Device.browser:type_name -> udetect.Browser
	0,  // 4: udetect.Device.connectiontype:type_name -> udetect.ConnType
	1,  // 5: udetect.Device.devicetype:type_name -> udetect.DeviceType
	3,  // 6: udetect.GeoLocation.carrier:type_name -> udetect.Carrier
	2,  // 7: udetect.Request.uid:type_name -> udetect.UUID
	2,  // 8: udetect.Request.sessid:type_name -> udetect.UUID
	4,  // 9: udetect.Response.user:type_name -> udetect.User
	7,  // 10: udetect.Response.device:type_name -> udetect.Device
	8,  // 11: udetect.Response.geo:type_name -> udetect.GeoLocation
	9,  // 12: udetect.Detector.Detect:input_type -> udetect.Request
	10, // 13: udetect.Detector.Detect:output_type -> udetect.Response
	13, // [13:14] is the sub-list for method output_type
	12, // [12:13] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_protocol_protocol_proto_init() }
func file_protocol_protocol_proto_init() {
	if File_protocol_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_protocol_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Carrier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*OS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Browser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GeoLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_protocol_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_protocol_proto_depIdxs,
		EnumInfos:         file_protocol_protocol_proto_enumTypes,
		MessageInfos:      file_protocol_protocol_proto_msgTypes,
	}.Build()
	File_protocol_protocol_proto = out.File
	file_protocol_protocol_proto_rawDesc = nil
	file_protocol_protocol_proto_goTypes = nil
	file_protocol_protocol_proto_depIdxs = nil
}
